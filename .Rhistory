# need to compile the stan model to C++
library(cmdstanr)
# data
data_1 <- c(1,1,1)
data_2 <- c(1,1,1,0)
data_3 <- c(0,1,1,0,1,1,1)
# get the data into a list for stan
dat1 <- list(N = length(data_1), water = data_1)
dat2 <- list(N = length(data_2), water = data_2)
dat3 <- list(N = length(data_3), water = data_3)
# need to compile the stan model to C++
library(cmdstanr)
# check for syntax errors
mod_m1 <- cmdstan_model("stan_models/m1.stan", compile = F)
mod_m1$check_syntax()
# if syntax is good, compile the model
mod_m1 <- cmdstan_model("stan_models/m1.stan")
fit1 <- mod_m1$sample(data = dat1, chains = 4, parallel_chains = 4)
# data
data_1 <- c(1,1,1)
data_2 <- c(1,1,1,0)
data_3 <- c(0,1,1,0,1,1,1)
# get the data into a list for stan
dat1 <- list(N = length(data_1), water = data_1)
dat2 <- list(N = length(data_2), water = data_2)
dat3 <- list(N = length(data_3), water = data_3)
# need to compile the stan model to C++
library(cmdstanr)
# check for syntax errors
mod_m1 <- cmdstan_model("stan_models/m1.stan", compile = F)
mod_m1$check_syntax()
# if syntax is good, compile the model
mod_m1 <- cmdstan_model("stan_models/m1.stan")
fit1 <- mod_m1$sample(data = dat1, chains = 4, parallel_chains = 4)
fit2 <- mod_m1$sample(data = dat2, chains = 4, parallel_chains = 4)
fit3 <- mod_m1$sample(data = dat3, chains = 4, parallel_chains = 4)
# data
data_1 <- c(1,1,1)
data_2 <- c(1,1,1,0)
data_3 <- c(0,1,1,0,1,1,1)
# get the data into a list for stan
dat1 <- list(N = length(data_1), water = data_1)
dat2 <- list(N = length(data_2), water = data_2)
dat3 <- list(N = length(data_3), water = data_3)
# need to compile the stan model to C++
library(cmdstanr)
# check for syntax errors
mod_m1 <- cmdstan_model("stan_models/m1.stan", compile = F)
mod_m1$check_syntax()
# if syntax is good, compile the model
mod_m1 <- cmdstan_model("stan_models/m1.stan")
fit1 <- mod_m1$sample(data = dat1, chains = 4, parallel_chains = 4)
fit2 <- mod_m1$sample(data = dat2, chains = 4, parallel_chains = 4)
fit3 <- mod_m1$sample(data = dat3, chains = 4, parallel_chains = 4)
# data
data_1 <- c(1,1,1)
data_2 <- c(1,1,1,0)
data_3 <- c(0,1,1,0,1,1,1)
# get the data into a list for stan
dat1 <- list(N = length(data_1), water = data_1)
dat2 <- list(N = length(data_2), water = data_2)
dat3 <- list(N = length(data_3), water = data_3)
# need to compile the stan model to C++
library(cmdstanr)
# check for syntax errors
mod_m1 <- cmdstan_model("stan_models/m1.stan", compile = F)
mod_m1$check_syntax()
# if syntax is good, compile the model
mod_m1 <- cmdstan_model("stan_models/m1.stan")
fit1 <- mod_m1$sample(data = dat1, chains = 4, parallel_chains = 4, refresh = 0)
fit2 <- mod_m1$sample(data = dat2, chains = 4, parallel_chains = 4, refresh = 0)
fit3 <- mod_m1$sample(data = dat3, chains = 4, parallel_chains = 4, refresh = 0)
# data
data_1 <- c(1,1,1)
data_2 <- c(1,1,1,0)
data_3 <- c(0,1,1,0,1,1,1)
# get the data into a list for stan
dat1 <- list(N = length(data_1), water = data_1)
dat2 <- list(N = length(data_2), water = data_2)
dat3 <- list(N = length(data_3), water = data_3)
# need to compile the stan model to C++
library(cmdstanr)
# check for syntax errors
mod_m1 <- cmdstan_model("stan_models/m1.stan", compile = F)
mod_m1$check_syntax()
# if syntax is good, compile the model
mod_m1 <- cmdstan_model("stan_models/m1.stan")
fit1 <- mod_m1$sample(data = dat1, chains = 4, parallel_chains = 4, show_messages = F)
fit2 <- mod_m1$sample(data = dat2, chains = 4, parallel_chains = 4, show_messages = F)
fit3 <- mod_m1$sample(data = dat3, chains = 4, parallel_chains = 4, show_messages = F)
plot(density(fit1$draws("p")$p))
fit1$draws("p", format = "df")$p
plot(density(fit1$draws("p", format = "df")$p))
plot(density(fit1$draws("p", format = "df")$p), lwd = 3, xlab = "p")
plot(density(fit1$draws("p", format = "df")$p), lwd = 3, xlab = "p", main = "Plausibility Water")
plot(density(fit2$draws("p", format = "df")$p), lwd = 3, xlab = "p", main = "Plausibility Water")
# data
data_1 <- c(1,1,1)
data_2 <- c(1,1,1,0)
data_3 <- c(0,1,1,0,1,1,1)
# get the data into a list for stan
dat1 <- list(N = length(data_1), water = data_1)
dat2 <- list(N = length(data_2), water = data_2)
dat3 <- list(N = length(data_3), water = data_3)
# need to compile the stan model to C++
library(cmdstanr)
# check for syntax errors
mod_m1 <- cmdstan_model("stan_models/m1.stan", compile = F)
mod_m1$check_syntax()
# if syntax is good, compile the model
mod_m1 <- cmdstan_model("stan_models/m1.stan")
fit1 <- mod_m1$sample(data = dat1, chains = 4, parallel_chains = 4, show_messages = F)
fit2 <- mod_m1$sample(data = dat2, chains = 4, parallel_chains = 4, show_messages = F)
fit3 <- mod_m1$sample(data = dat3, chains = 4, parallel_chains = 4, show_messages = F)
plot(density(fit1$draws("p", format = "df")$p), lwd = 3, xlab = "p", main = "Plausibility Water")
plot(density(fit2$draws("p", format = "df")$p), lwd = 3, xlab = "p", main = "Plausibility Water")
plot(density(fit3$draws("p", format = "df")$p), lwd = 3, xlab = "p", main = "Plausibility Water")
mod_m2 <- mod_m1 <- cmdstan_model("stan_models/m2.stan", compile = F)
mod_m2$check_syntax()
# if syntax is good, compile the model
mod_m2 <- cmdstan_model("stan_models/m2.stan")
mod_m2 <- mod_m1 <- cmdstan_model("stan_models/m2.stan", compile = F)
mod_m2$check_syntax()
# if syntax is good, compile the model
mod_m2 <- cmdstan_model("stan_models/m2.stan")
fit1 <- mod_m1$sample(data = dat1, chains = 4, parallel_chains = 4, show_messages = F)
fit1 <- mod_m2$sample(data = dat1, chains = 4, parallel_chains = 4, show_messages = F)
mod_m2 <- mod_m1 <- cmdstan_model("stan_models/m2.stan", compile = F)
mod_m2$check_syntax()
# if syntax is good, compile the model
mod_m2 <- cmdstan_model("stan_models/m2.stan")
fit1 <- mod_m2$sample(data = dat1, chains = 4, parallel_chains = 4, show_messages = F)
fit2 <- mod_m2$sample(data = dat2, chains = 4, parallel_chains = 4, show_messages = F)
fit3 <- mod_m2$sample(data = dat3, chains = 4, parallel_chains = 4, show_messages = F)
plot(density(fit1$draws("p", format = "df")$p), lwd = 3, xlab = "p", main = "Plausibility Water")
plot(density(fit2$draws("p", format = "df")$p), lwd = 3, xlab = "p", main = "Plausibility Water")
plot(density(fit3$draws("p", format = "df")$p), lwd = 3, xlab = "p", main = "Plausibility Water")
hist(fit1$draws("p", format = "df")$p, xlab = "p", main = "Plausibility Water")
mod_m2 <- mod_m1 <- cmdstan_model("stan_models/m2.stan", compile = F)
mod_m2$check_syntax()
# if syntax is good, compile the model
mod_m2 <- cmdstan_model("stan_models/m2.stan")
fit1 <- mod_m2$sample(data = dat1, chains = 4, parallel_chains = 4, show_messages = F)
fit2 <- mod_m2$sample(data = dat2, chains = 4, parallel_chains = 4, show_messages = F)
fit3 <- mod_m2$sample(data = dat3, chains = 4, parallel_chains = 4, show_messages = F)
hist(fit1$draws("p", format = "df")$p, xlab = "p", main = "Plausibility Water")
histfit2$draws("p", format = "df")$p,  xlab = "p", main = "Plausibility Water")
hist(fit1$draws("p", format = "df")$p, xlab = "p", main = "Plausibility Water")
hist(fit2$draws("p", format = "df")$p,  xlab = "p", main = "Plausibility Water")
hist(fit3$draws("p", format = "df")$p,  xlab = "p", main = "Plausibility Water")
```
# data
data_1 <- c(1,1,1)
data_2 <- c(1,1,1,0)
data_3 <- c(0,1,1,0,1,1,1)
# get the data into a list for stan
dat1 <- list(N = length(data_1), water = data_1)
dat2 <- list(N = length(data_2), water = data_2)
dat3 <- list(N = length(data_3), water = data_3)
# need to compile the stan model to C++
library(cmdstanr)
# check for syntax errors
mod_m1 <- cmdstan_model("stan_models/m1.stan", compile = F)
mod_m1$check_syntax()
# if syntax is good, compile the model
mod_m1 <- cmdstan_model("stan_models/m1.stan")
fit1 <- mod_m1$sample(data = dat1, chains = 4, parallel_chains = 4, show_messages = F)
fit2 <- mod_m1$sample(data = dat2, chains = 4, parallel_chains = 4, show_messages = F)
fit3 <- mod_m1$sample(data = dat3, chains = 4, parallel_chains = 4, show_messages = F)
hist(fit1$draws("p", format = "df")$p, xlab = "p", main = "Plausibility Water")
hist(fit2$draws("p", format = "df")$p,  xlab = "p", main = "Plausibility Water")
hist(fit3$draws("p", format = "df")$p,  xlab = "p", main = "Plausibility Water")
mod_m2 <- mod_m1 <- cmdstan_model("stan_models/m2.stan", compile = F)
mod_m2$check_syntax()
# if syntax is good, compile the model
mod_m2 <- cmdstan_model("stan_models/m2.stan")
fit1 <- mod_m2$sample(data = dat1, chains = 4, parallel_chains = 4, show_messages = F)
fit2 <- mod_m2$sample(data = dat2, chains = 4, parallel_chains = 4, show_messages = F)
fit3 <- mod_m2$sample(data = dat3, chains = 4, parallel_chains = 4, show_messages = F)
hist(fit1$draws("p", format = "df")$p, xlab = "p", main = "Plausibility Water")
hist(fit2$draws("p", format = "df")$p,  xlab = "p", main = "Plausibility Water")
hist(fit3$draws("p", format = "df")$p,  xlab = "p", main = "Plausibility Water")
.3*.5/(.3*.5 + .5)
?poly
.7*.5
.7*.5/(.7*.5 + .5)
(.7*.5)/(.7*.5 + 1*.5)
(.3*.5)/(.3*.5 + 1*.5)
(1/6)/((1/6) + 1/3)
dunif(.5, 0, 1)
dunif(.6, .5,1)
(1/4)/(1/3 + 1/6)
(1/3)(1/3 + 1/6)
(1/3)*(1/3 + 1/6)
(1/3)/(1/3 + 1/6)
.05 + .1
# simulate 10000 individuals from either species with prob = .5 A = 1, B = 0
species <- rbinom(1e4, 1, .5)
# simulate probability of first set being twins (1) given the species
first_twins <- rbinom(1e4, 1, prob = ifelse(species==1, .1, .2))
# simulate second twins
second_twins <- rbinom(1e4, 1, ifelse(species == 1, .1, .2))
# calculate the probability of second twins if the first set was twins
sum(first_twins==1 & second_twins==1)/sum(first_twins==1)
# simulate 10000 individuals from either species with prob = .5 A = 1, B = 0
species <- rbinom(1e4, 1, .5)
# simulate probability of first set being twins (1) given the species
first_twins <- rbinom(1e4, 1, prob = ifelse(species==1, .1, .2))
# simulate second twins
second_twins <- rbinom(1e4, 1, ifelse(species == 1, .1, .2))
# calculate the probability of second twins if the first set was twins
sum(first_twins==1 & second_twins==1)/sum(first_twins==1)
# simulate 10000 individuals from either species with prob = .5 A = 1, B = 0
species <- rbinom(1e4, 1, .5)
# simulate probability of first set being twins (1) given the species
first_twins <- rbinom(1e4, 1, prob = ifelse(species==1, .1, .2))
# simulate second twins
second_twins <- rbinom(1e4, 1, ifelse(species == 1, .1, .2))
# calculate the probability of second twins if the first set was twins
sum(first_twins==1 & second_twins==1)/sum(first_twins==1)
# simulate 10000 individuals from either species with prob = .5 A = 1, B = 0
species <- rbinom(1e4, 1, .5)
# simulate probability of first set being twins (1) given the species
first_twins <- rbinom(1e4, 1, prob = ifelse(species==1, .1, .2))
# simulate second twins
second_twins <- rbinom(1e4, 1, ifelse(species == 1, .1, .2))
# calculate the probability of second twins if the first set was twins
sum(first_twins==1 & second_twins==1)/sum(first_twins==1)
# simulate 10000 individuals from either species with prob = .5 A = 1, B = 0
species <- rbinom(1e4, 1, .5)
# simulate probability of first set being twins (1) given the species
first_twins <- rbinom(1e4, 1, prob = ifelse(species==1, .1, .2))
# simulate second twins
second_twins <- rbinom(1e4, 1, ifelse(species == 1, .1, .2))
# calculate the probability of second twins if the first set was twins
sum(first_twins==1 & second_twins==1)/sum(first_twins==1)
# simulate 10000 individuals from either species with prob = .5 A = 1, B = 0
species <- rbinom(1e4, 1, .5)
# simulate probability of first set being twins (1) given the species
first_twins <- rbinom(1e4, 1, prob = ifelse(species==1, .1, .2))
# simulate second twins
second_twins <- rbinom(1e4, 1, ifelse(species == 1, .1, .2))
# calculate the probability of second twins if the first set was twins
sum(first_twins==1 & second_twins==1)/sum(first_twins==1)
# simulate 10000 individuals from either species with prob = .5 A = 1, B = 0
species <- rbinom(1e4, 1, .5)
# simulate probability of first set being twins (1) given the species
first_twins <- rbinom(1e4, 1, prob = ifelse(species==1, .1, .2))
# simulate second twins
second_twins <- rbinom(1e4, 1, ifelse(species == 1, .1, .2))
# calculate the probability of second twins if the first set was twins
sum(first_twins==1 & second_twins==1)/sum(first_twins==1)
# simulate 10000 individuals from either species with prob = .5 A = 1, B = 0
species <- rbinom(1e4, 1, .5)
# simulate probability of first set being twins (1) given the species
first_twins <- rbinom(1e4, 1, prob = ifelse(species==1, .1, .2))
# simulate second twins
second_twins <- rbinom(1e4, 1, ifelse(species == 1, .1, .2))
# calculate the probability of second twins if the first set was twins
sum(first_twins==1 & second_twins==1)/sum(first_twins==1)
# simulate 10000 individuals from either species with prob = .5 A = 1, B = 0
species <- rbinom(1e4, 1, .5)
# simulate probability of first set being twins (1) given the species
first_twins <- rbinom(1e4, 1, prob = ifelse(species==1, .1, .2))
# simulate second twins
second_twins <- rbinom(1e4, 1, ifelse(species == 1, .1, .2))
# calculate the probability of second twins if the first set was twins
sum(first_twins==1 & second_twins==1)/sum(first_twins==1)
# simulate 10000 individuals from either species with prob = .5 A = 1, B = 0
species <- rbinom(1e4, 1, .5)
# simulate probability of first set being twins (1) given the species
first_twins <- rbinom(1e4, 1, prob = ifelse(species==1, .1, .2))
# simulate second twins
second_twins <- rbinom(1e4, 1, ifelse(species == 1, .1, .2))
# calculate the probability of second twins if the first set was twins
sum(first_twins==1 & second_twins==1)/sum(first_twins==1)
# simulate 10000 individuals from either species with prob = .5 A = 1, B = 0
species <- rbinom(1e4, 1, .5)
# simulate probability of first set being twins (1) given the species
first_twins <- rbinom(1e4, 1, prob = ifelse(species==1, .1, .2))
# simulate second twins
second_twins <- rbinom(1e4, 1, ifelse(species == 1, .1, .2))
# calculate the probability of second twins if the first set was twins
sum(first_twins==1 & second_twins==1)/sum(first_twins==1)
.5*.1 + .5*.2
twins_sim <- function(){
# simulate 10000 individuals from either species with prob = .5 A = 1, B = 0
species <- rbinom(1e5, 1, .5)
# simulate probability of first set being twins (1) given the species
first_twins <- rbinom(1e5, 1, prob = ifelse(species==1, .1, .2))
# simulate second twins
second_twins <- rbinom(1e5, 1, ifelse(species == 1, .1, .2))
# calculate the probability of second twins if the first set was twins
sum(first_twins==1 & second_twins==1)/sum(first_twins==1)
}
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
(.5*.1)/(.5*.1 + .5*.2)
(.5*.2)/(.5*.2 + .1*.5)
.1/3 + .4/3
1/16
1/6
twins_sim <- function(){
# simulate 10000 individuals from either species with prob = .5 A = 1, B = 0
species <- rbinom(1e5, 1, .5)
# simulate probability of first set being twins (1) given the species
first_twins <- rbinom(1e5, 1, prob = ifelse(species==1, .1, .2))
# simulate second twins
second_twins <- rbinom(1e5, 1, ifelse(species == 1, .1, .2))
# calculate the probability of second twins if the first set was twins
sum(first_twins==1 & second_twins==1)/sum(first_twins==1)
}
twins_sim()
twins_sim <- function(){
# simulate 10000 individuals from either species with prob = .5 A = 1, B = 0
species <- rbinom(1e5, 1, .5)
# simulate probability of first set being twins (1) given the species
first_twins <- rbinom(1e5, 1, prob = ifelse(species==1, .1, .2))
# simulate second twins
second_twins <- rbinom(1e5, 1, ifelse(species == 1, .1, .2))
# calculate the probability of second twins if the first set was twins
sum(first_twins==1 & second_twins==1)/sum(first_twins==1)
}
hist(repicate(1000, twins_sim()))
twins_sim <- function(){
# simulate 10000 individuals from either species with prob = .5 A = 1, B = 0
species <- rbinom(1e5, 1, .5)
# simulate probability of first set being twins (1) given the species
first_twins <- rbinom(1e5, 1, prob = ifelse(species==1, .1, .2))
# simulate second twins
second_twins <- rbinom(1e5, 1, ifelse(species == 1, .1, .2))
# calculate the probability of second twins if the first set was twins
sum(first_twins==1 & second_twins==1)/sum(first_twins==1)
}
hist(replicate(1000, twins_sim()))
twins_sim <- function(){
# simulate 10000 individuals from either species with prob = .5 A = 1, B = 0
species <- rbinom(1e5, 1, .5)
# simulate probability of first set being twins (1) given the species
first_twins <- rbinom(1e5, 1, prob = ifelse(species==1, .1, .2))
# simulate second twins
second_twins <- rbinom(1e5, 1, ifelse(species == 1, .1, .2))
# calculate the probability of second twins if the first set was twins
sum(first_twins==1 & second_twins==1)/sum(first_twins==1)
}
hist(replicate(100, twins_sim()))
abline(v = 1/6, col = "white", lwd = 6)
abline(v = 1/6, col = "blue", lwd = 3)
hist(replicate(100, twins_sim()), main = "Simulations of second twins given first twins")
abline(v = 1/6, col = "white", lwd = 6)
twins_sim <- function(){
# simulate 10000 individuals from either species with prob = .5 A = 1, B = 0
species <- rbinom(1e5, 1, .5)
# simulate probability of first set being twins (1) given the species
first_twins <- rbinom(1e5, 1, prob = ifelse(species==1, .1, .2))
# simulate second twins
second_twins <- rbinom(1e5, 1, ifelse(species == 1, .1, .2))
# calculate the probability of second twins if the first set was twins
sum(first_twins==1 & second_twins==1)/sum(first_twins==1)
}
hist(replicate(100, twins_sim()), main = "Simulations of second twins given first twins")
abline(v = 1/6, col = "white", lwd = 6)
abline(v = 1/6, col = "blue", lwd = 3)
hist(replicate(100, twins_sim()), main = "Simulations of second twins given first twins",
xlab = "Proportion Second Twins given First Twins")
abline(v = 1/6, col = "white", lwd = 6)
twins_sim <- function(){
# simulate 10000 individuals from either species with prob = .5 A = 1, B = 0
species <- rbinom(1e5, 1, .5)
# simulate probability of first set being twins (1) given the species
first_twins <- rbinom(1e5, 1, prob = ifelse(species==1, .1, .2))
# simulate second twins
second_twins <- rbinom(1e5, 1, ifelse(species == 1, .1, .2))
# calculate the probability of second twins if the first set was twins
sum(first_twins==1 & second_twins==1)/sum(first_twins==1)
}
hist(replicate(100, twins_sim()), main = "Simulations of second twins given first twins",
xlab = "Proportion Second Twins given First Twins")
abline(v = 1/6, col = "white", lwd = 6)
abline(v = 1/6, col = "blue", lwd = 3)
