means <- sapply(stn(d_young$weight), function(x) a + b * x) * sd(d_young$height) + mean(d_young$height)
hist(means)
means <- sapply(stn(d_young$weight), function(x) a + b * x) * sd(d_young$height) + mean(d_young$height)
mu_means <- apply(means, 2, mean)
upr_means <- apply(means, 2, function(x) HPDI(x, .89)[2])
lwr_means <- apply(means, 2, function(x) HPDI(x, .89)[1])
y_pred <- fit$draws("y_pred", format = "df")[,1:nrow(d_young)] * sd(d_young$height) + mean(d_young$height)
upr_pred <- apply(y_pred, 2, function(x) HPDI(x, .89)[2])
lwr_pred <- apply(y_pred, 2, function(x) HPDI(x, .89)[1])
data.frame(weight = d_young$weight, height = d_young$height)
data.frame(weight = d_young$weight, height = d_young$height, means, upr_means,
lwr_means, upr_pred, lwr_pred)
upr_pred
lwr_pred
lwr_means
upr_means
mu_means
data.frame(weight = d_young$weight, height = d_young$height, means, upr_means,
lwr_means, upr_pred, lwr_pred)
data.frame(weight = d_young$weight, height = d_young$height, mu_means, upr_means,
lwr_means, upr_pred, lwr_pred)
data.frame(weight = d_young$weight, height = d_young$height, mu_means, upr_means,
lwr_means, upr_pred, lwr_pred) %>%
ggplot(aes(x = weight, y = height)) +
geom_point()
data.frame(weight = d_young$weight, height = d_young$height, mu_means, upr_means,
lwr_means, upr_pred, lwr_pred) %>%
ggplot(aes(x = weight, y = height)) +
geom_point() +
geom_line(aes(x = weight, y = mu_means))
data.frame(weight = d_young$weight, height = d_young$height, mu_means, upr_means,
lwr_means, upr_pred, lwr_pred) %>%
ggplot(aes(x = weight, y = height)) +
geom_point() +
geom_line(aes(x = weight, y = mu_means), linewidth = 1)
data.frame(weight = d_young$weight, height = d_young$height, mu_means, upr_means,
lwr_means, upr_pred, lwr_pred) %>%
ggplot(aes(x = weight, y = height)) +
geom_point() +
geom_line(aes(x = weight, y = mu_means), linewidth = 1) +
geom_ribbon(aes(x = weight, ymax = upr_means, ymin = lwr_means))
data.frame(weight = d_young$weight, height = d_young$height, mu_means, upr_means,
lwr_means, upr_pred, lwr_pred) %>%
ggplot(aes(x = weight, y = height)) +
geom_point() +
geom_line(aes(x = weight, y = mu_means), linewidth = 1) +
geom_ribbon(aes(x = weight, ymax = upr_means, ymin = lwr_means),
color = "grey", alpha = .25)
data.frame(weight = d_young$weight, height = d_young$height, mu_means, upr_means,
lwr_means, upr_pred, lwr_pred) %>%
ggplot(aes(x = weight, y = height)) +
geom_point() +
geom_line(aes(x = weight, y = mu_means), linewidth = 1) +
geom_ribbon(aes(x = weight, ymax = upr_means, ymin = lwr_means),
color = "grey", alpha = .25) +
geom_ribbon(aes(x = weight, ymax = upr_pred, ymin = lwr_pred),
color = "grey", alpha = .25) +
theme_classic()
data.frame(weight = d_young$weight, height = d_young$height, mu_means, upr_means,
lwr_means, upr_pred, lwr_pred) %>%
ggplot(aes(x = weight, y = height)) +
geom_point() +
geom_line(aes(x = weight, y = mu_means), linewidth = .75) +
geom_ribbon(aes(x = weight, ymax = upr_means, ymin = lwr_means),
color = "grey", alpha = .25) +
geom_ribbon(aes(x = weight, ymax = upr_pred, ymin = lwr_pred),
color = "grey", alpha = .25) +
theme_classic()
sigma <- runif(1000, 0, 10)
mu <- rnorm(1000, 0, 10)
y <- rnorm(mu, sigma)
hist(sigma)
hist(mu)
hist(y)
alist(
y ~ dnorm(mu, sigma),
mu ~ dnorm(0, 10),
sigma ~ dunif(0,10)
)
# center year so that it is (-1, 0, 1)
# standardize height measurements so that they have a mean of 0 and a stdv of 1
n <- 100
a <- rnorm(n,0, .5)
b <- rnorm(n,.5, .5)
y <- matrix(nrow = n, ncol = 3)
sigma <- rnorm(n, 0, .25)
for(i in 1:3){
y[,i] <- rnorm(n, a + b*(i-2), exp(sigma))
}
hist(y)
abline(v = quantile(y,c(.025, .975)),
col = "red")
year <- c(-1,0,1)
plot(apply(y,2,mean) ~ year, type = "l")
a <- rnorm(n,120, 10)
b <- rnorm(n,2,.5)
sigma <- rnorm(n,0, 1)
y <- matrix(nrow = n, ncol = 3)
for(i in 1:3){
y[,i] <- rnorm(n, a + b*(i-2), exp(sigma))
}
hist(y)
plot(apply(y, 2, mean) ~ year, type = "l")
hist(replicate(1e4, max(exp(rnorm(100, 0, .5)))))
library(rethinking)
library(cmdstanr)
library(tidyverse)
data(Howell1)
d <- Howell1
stn <- function(x) (x - mean(x))/sd(x)
dat <- list(
N = nrow(d),
weight = stn(d$weight),
height = stn(d$height)
)
mod <- cmdstan_model("stan_models/height_mod.stan")
fit_h1 <- mod$sample(
data = dat,
chains = 4,
parallel_chains = 4,
show_messages = F
)
alpha <- fit_h1$draws("a", format = "df")$a
beta <- fit_h1$draws("b", format = "df")$b
sigma <- fit_h1$draws("sigma", format = "df")$sigma
weight_obs <- c(46.95, 43.72, 64.78, 32.59, 54.63)
obs_stn <- (weight_obs - mean(d$weight))/sd(d$weight)
height_pred_stn <- sapply(obs_stn, function(x) rnorm(length(alpha), alpha + beta * x, sigma))
height_pred <- height_pred_stn * sd(d$height) + mean(d$height)
height_pred <- data.frame(height_pred)
colnames(height_pred) <- weight_obs
height_pred %>%
pivot_longer(1:5, names_to = "weight",
values_to = "height_pred") %>%
mutate(weight = as.numeric(weight)) %>%
group_by(weight) %>%
summarise(mu = mean(height_pred),
lwr = HPDI(height_pred, .89)[1],
upr = HPDI(height_pred, .89)[2]) %>%
round(2)
d_young <- d %>%
filter(age < 18)
dat <- list(
N = nrow(d_young),
weight = stn(d_young$weight),
height = stn(d_young$height)
)
fit <- mod$sample(
data = dat,
chains = 4,
parallel_chains = 4,
show_messages = F
)
mean(fit$draws("b", format = "df")$b)
# means
a <- fit$draws("a", format = "df")$a
b <- fit$draws("b", format = "df")$b
means <- sapply(stn(d_young$weight), function(x) a + b * x) * sd(d_young$height) + mean(d_young$height)
mu_means <- apply(means, 2, mean)
upr_means <- apply(means, 2, function(x) HPDI(x, .89)[2])
lwr_means <- apply(means, 2, function(x) HPDI(x, .89)[1])
# predictid values
y_pred <- fit$draws("y_pred", format = "df")[,1:nrow(d_young)] * sd(d_young$height) + mean(d_young$height)
upr_pred <- apply(y_pred, 2, function(x) HPDI(x, .89)[2])
lwr_pred <- apply(y_pred, 2, function(x) HPDI(x, .89)[1])
data.frame(weight = d_young$weight, height = d_young$height, mu_means, upr_means,
lwr_means, upr_pred, lwr_pred) %>%
ggplot(aes(x = weight, y = height)) +
geom_point() +
geom_line(aes(x = weight, y = mu_means), linewidth = .75) +
geom_ribbon(aes(x = weight, ymax = upr_means, ymin = lwr_means),
color = "grey", alpha = .25) +
geom_ribbon(aes(x = weight, ymax = upr_pred, ymin = lwr_pred),
color = "grey", alpha = .25) +
theme_classic()
d
rstan:::rstudio_stanc("problems/chapter_4/stan_models/log_weight.stan")
mod <- cmdstan_model("stan_models/log_weight.stan")
fit <- mod$sample(
data = dat,
chains = 4,
parallel_chains = 4
)
dat <- list(
N = nrow(d),
log_weight = log(d$weight),
height = d$height
)
mod <- cmdstan_model("stan_models/log_weight.stan")
fit <- mod$sample(
data = dat,
chains = 4,
parallel_chains = 4
)
plot(d$height ~ log(d$weight))
rstan:::rstudio_stanc("problems/chapter_4/stan_models/log_weight.stan")
mod <- cmdstan_model("stan_models/log_weight.stan")
fit <- mod$sample(
data = dat,
chains = 4,
parallel_chains = 4
)
hist(abs(rnorm(1e4, 0, 100)))
hist(abs(rnorm(1e4, 0, 10)))
hist(abs(rnorm(1e4, 0, 50)))
hist(abs(rnorm(1e4, 0, 25)))
rstan:::rstudio_stanc("problems/chapter_4/stan_models/log_weight.stan")
mod <- cmdstan_model("stan_models/log_weight.stan")
fit <- mod$sample(
data = dat,
chains = 4,
parallel_chains = 4
)
fit$print()
fit$print(c("a", "b","sigma"))
fit$print(c("a","b","sigma"))
a <- fit$draws("a", format = "df")$a
b <- fit$draws("b", format = "df")$b
means <- sapply(log(d$weight), function(x) a + b * x)
means
dim(means)
mu_means <- apply(means, 2, mean)
upr_means <- apply(means, 2, function(x) HPDI(x)[2])
lwr_means <- apply(means, 2, function(x) HPDI(x)[1])
lwr_means
# extract the posterior predictive simulations
y_pred <- fit$draws("y_pred", format = "df")[,1:nrow(d)]
upr_pred <- apply(y_pred, 2, function(x) HPDI(x)[2])
lwr_pred <- apply(y_pred, 2, function(x) HPDI(x)[1])
data.frame(height = d$height, weight = d$weight, mu_means,
upr_means, lwr_means, upr_pred, lwr_pred) %>%
ggplot(aes(x = weight, y = height)) +
geom_point()
data.frame(height = d$height, weight = d$weight, mu_means,
upr_means, lwr_means, upr_pred, lwr_pred) %>%
ggplot(aes(x = weight, y = height)) +
geom_point() +
theme_minimal()
data.frame(height = d$height, weight = d$weight, mu_means,
upr_means, lwr_means, upr_pred, lwr_pred) %>%
ggplot(aes(x = weight, y = height)) +
geom_point() +
theme_classic()
data.frame(height = d$height, weight = d$weight, mu_means,
upr_means, lwr_means, upr_pred, lwr_pred) %>%
ggplot(aes(x = weight, y = height)) +
geom_point(alpha = .7) +
theme_classic()
data.frame(height = d$height, weight = d$weight, mu_means,
upr_means, lwr_means, upr_pred, lwr_pred) %>%
ggplot(aes(x = weight, y = height)) +
geom_point(color = "lightblue") +
theme_classic()
data.frame(height = d$height, weight = d$weight, mu_means,
upr_means, lwr_means, upr_pred, lwr_pred) %>%
ggplot(aes(x = weight, y = height)) +
geom_point(color = "lightblue") +
geom_line(aes(x = weight, y = mu_means))
data.frame(height = d$height, weight = d$weight, mu_means,
upr_means, lwr_means, upr_pred, lwr_pred) %>%
ggplot(aes(x = weight, y = height)) +
geom_point(color = "lightblue") +
geom_line(aes(x = weight, y = mu_means)) +
geom_ribbon(aes(x = weight, ymax = upr_means, ymin = lwr_means),
color = "grey", alpha = .25)
data.frame(height = d$height, weight = d$weight, mu_means,
upr_means, lwr_means, upr_pred, lwr_pred) %>%
ggplot(aes(x = weight, y = height)) +
geom_point(color = "lightblue") +
geom_line(aes(x = weight, y = mu_means)) +
geom_ribbon(aes(x = weight, ymax = upr_means, ymin = lwr_means),
color = "grey", alpha = .75) +
geom_ribbon(aes(x = weight, ymax = upr_pred, ymin = lwr_pred),
color = "grey", alpha = .25) +
theme_classic()
set.seed(120414)
# simulate x
x <- rnorm(n)
set.seed(120414)
# simulate x
x <- rnorm(n)
n <- 100
# simulate x
x <- rnorm(n)
# simulate y so that it is positively correlated with x
y <- rnorm(n, x)
# simulate z so that it is positively coreelated with x
z <- rnorm(n, x)
# visualize the pairs
pairs(data.frame(x,y,z))
# look at the raw correlations
cor(data.frame(x,y,z))
# least squares regression
X <- matrix(c(rep(1, length(y)),x,z), ncol = 3)
solve(t(X) %*% X) %*% (t(X) %*% y)
lm(y ~ x + z)
set.seed(120414)
# simulate x
x <- rnorm(n)
# simulate z so that it is positively correlated with x
z <- rnorm(n, x)
# simulate y so that it is positively correlated with x but negatively correlated wity z
y <- rnorm(n, .5*x - z)
# look at pairs plots to visualize
pairs(data.frame(x,z,y))
# look at the raw correlations
cor(data.frame(x,z,y))
# least squares to recover the regression coefficients
X <- matrix(c(rep(1,length(y)), x, z), ncol = 3)
solve(t(X) %*% X) %*% t(X) %*% y
set.seed(120414)
# simulate x
x <- rnorm(n)
# simulate z so that it is positively correlated with x
z <- rnorm(n, x)
# simulate y so that it is positively correlated with x but negatively correlated wity z
y <- rnorm(n, .5*x - .5*z)
# look at pairs plots to visualize
pairs(data.frame(x,z,y))
# look at the raw correlations
cor(data.frame(x,z,y))
# least squares to recover the regression coefficients
X <- matrix(c(rep(1,length(y)), x, z), ncol = 3)
solve(t(X) %*% X) %*% t(X) %*% y
set.seed(120414)
# simulate x
x <- rnorm(n)
# simulate z so that it is positively correlated with x
z <- rnorm(n, x)
# simulate y so that it is positively correlated with x but negatively correlated wity z
y <- rnorm(n, x - z)
# look at pairs plots to visualize
pairs(data.frame(x,z,y))
# look at the raw correlations
cor(data.frame(x,z,y))
# least squares to recover the regression coefficients
X <- matrix(c(rep(1,length(y)), x, z), ncol = 3)
solve(t(X) %*% X) %*% t(X) %*% y
exp(rnorm(1e4, 0, 1))
hist(exp(rnorm(1e4)))
rstan:::rstudio_stanc("problems/chapter_5/stan_models/linear_mod.stan")
lin_mod <- cmdstan_model("stan_models/linear_mod.stan")
library(rethinking)
library(tidyverse)
library(cmdstanr)
library(bayesplot)
lin_mod <- cmdstan_model("stan_models/linear_mod.stan")
data(foxes)
foxes
d <- foxes
foxes
foxes$groupsize
# function to standardize variables
stn <- function(x) (x - mean(x))/sd(x)
# area size model
X <- matrix(c(rep(1, nrow(foxes)), stn(foxes$area)), ncol = 2)
dat_area <- list(
N = nrow(foxes),
K = ncol(X),
y = stn(foxes$weight)
)
fit_area <- lin_mod$sample(
data = dat_area,
chains = 4,
parallel_chains = 4
)
dat_area <- list(
N = nrow(foxes),
K = ncol(X),
y = stn(foxes$weight),
X = X
)
fit_area <- lin_mod$sample(
data = dat_area,
chains = 4,
parallel_chains = 4
)
fit_area$diagnostic_summary()
mcmc_intervals(fit_area$draws("beta"))
X <- matrix(c(rep(1, nrow(foxes)), stn(foxes$groupsize)), ncol = 2)
dat_group <- list(
N = nrow(foxes),
K = ncol(X),
y = stn(foxes$weight),
X = X
)
fit_group <- lin_mod$sample(
data = dat_area,
chains = 4,
parallel_chains = 4
)
fit_group$diagnostic_summary()
mcmc_intervals(fit_group$draws("beta"))
X <- matrix(c(rep(1, nrow(foxes)), stn(foxes$area),stn(foxes$groupsize)), ncol = 2)
dat_both <- list(
N = nrow(foxes),
K = ncol(X),
y = stn(foxes$weight),
X = X
)
fit_both <- lin_mod$sample(
data = dat_area,
chains = 4,
parallel_chains = 4
)
fit_both$diagnostic_summary()
mcmc_intervals(fit_both$draws("beta"))
X <- matrix(c(rep(1, nrow(foxes)), stn(foxes$area),stn(foxes$groupsize)), ncol = 3)
dat_both <- list(
N = nrow(foxes),
K = ncol(X),
y = stn(foxes$weight),
X = X
)
fit_both <- lin_mod$sample(
data = dat_area,
chains = 4,
parallel_chains = 4
)
mcmc_intervals(fit_both$draws("beta"))
X
dat_both <- list(
N = nrow(foxes),
K = ncol(X),
y = stn(foxes$weight),
X = X
)
fit_both <- lin_mod$sample(
data = dat_both,
chains = 4,
parallel_chains = 4
)
mcmc_intervals(fit_both$draws("beta"))
data(foxes)
# area size model
X <- matrix(c(rep(1, nrow(foxes)), stn(foxes$area)), ncol = 2)
dat_area <- list(
N = nrow(foxes),
K = ncol(X),
y = stn(foxes$weight),
X = X
)
fit_area <- lin_mod$sample(
data = dat_area,
chains = 4,
parallel_chains = 4
)
mcmc_intervals(fit_area$draws("beta"))
X <- matrix(c(rep(1, nrow(foxes)), stn(foxes$groupsize)), ncol = 2)
dat_group <- list(
N = nrow(foxes),
K = ncol(X),
y = stn(foxes$weight),
X = X
)
fit_group <- lin_mod$sample(
data = dat_group,
chains = 4,
parallel_chains = 4
)
mcmc_intervals(fit_group$draws("beta"))
X <- matrix(c(rep(1, nrow(foxes)), stn(foxes$area),stn(foxes$groupsize)), ncol = 3)
dat_both <- list(
N = nrow(foxes),
K = ncol(X),
y = stn(foxes$weight),
X = X
)
fit_both <- lin_mod$sample(
data = dat_both,
chains = 4,
parallel_chains = 4
)
mcmc_intervals(fit_both$draws("beta"))
X <- matrix(c(rep(1, nrow(foxes)), stn(foxes$area),stn(foxes$groupsize)), ncol = 3)
dat_both <- list(
N = nrow(foxes),
K = ncol(X),
y = stn(foxes$weight),
X = X
)
fit_both <- lin_mod$sample(
data = dat_both,
chains = 4,
parallel_chains = 4
)
mcmc_intervals(fit_both$draws("beta"))
library(rethinking)
library(tidyverse)
library(cmdstanr)
library(bayesplot)
data("WaffleDivorce")
d <- WaffleDivorce
# function to standardize variables
stn <- function(x) (x - mean(x))/sd(x)
X <- matrix(c(rep(1, nrow(d)), stn(d$MedianAgeMarriage), stn(d$Divorce)),
ncol = 3)
dat <- list(
N = nrow(d),
K = ncol(X),
marriage = stn(d$Marriage),
X = X
)
mod.3 <- cmdstan_model("stan_models/married_pred.stan")
update.packages("cmdstanr")
mod.3 <- cmdstan_model("stan_models/married_pred.stan")
library(cmdstanr)
cmdstan_version()
?set_cmdstan_path
set_cmdstan_path()
install_cmdstan()
mod.3 <- cmdstan_model("stan_models/married_pred.stan")
