# calculate the probability of second twins if the first set was twins
sum(first_twins==1 & second_twins==1)/sum(first_twins==1)
# simulate 10000 individuals from either species with prob = .5 A = 1, B = 0
species <- rbinom(1e4, 1, .5)
# simulate probability of first set being twins (1) given the species
first_twins <- rbinom(1e4, 1, prob = ifelse(species==1, .1, .2))
# simulate second twins
second_twins <- rbinom(1e4, 1, ifelse(species == 1, .1, .2))
# calculate the probability of second twins if the first set was twins
sum(first_twins==1 & second_twins==1)/sum(first_twins==1)
# simulate 10000 individuals from either species with prob = .5 A = 1, B = 0
species <- rbinom(1e4, 1, .5)
# simulate probability of first set being twins (1) given the species
first_twins <- rbinom(1e4, 1, prob = ifelse(species==1, .1, .2))
# simulate second twins
second_twins <- rbinom(1e4, 1, ifelse(species == 1, .1, .2))
# calculate the probability of second twins if the first set was twins
sum(first_twins==1 & second_twins==1)/sum(first_twins==1)
# simulate 10000 individuals from either species with prob = .5 A = 1, B = 0
species <- rbinom(1e4, 1, .5)
# simulate probability of first set being twins (1) given the species
first_twins <- rbinom(1e4, 1, prob = ifelse(species==1, .1, .2))
# simulate second twins
second_twins <- rbinom(1e4, 1, ifelse(species == 1, .1, .2))
# calculate the probability of second twins if the first set was twins
sum(first_twins==1 & second_twins==1)/sum(first_twins==1)
# simulate 10000 individuals from either species with prob = .5 A = 1, B = 0
species <- rbinom(1e4, 1, .5)
# simulate probability of first set being twins (1) given the species
first_twins <- rbinom(1e4, 1, prob = ifelse(species==1, .1, .2))
# simulate second twins
second_twins <- rbinom(1e4, 1, ifelse(species == 1, .1, .2))
# calculate the probability of second twins if the first set was twins
sum(first_twins==1 & second_twins==1)/sum(first_twins==1)
# simulate 10000 individuals from either species with prob = .5 A = 1, B = 0
species <- rbinom(1e4, 1, .5)
# simulate probability of first set being twins (1) given the species
first_twins <- rbinom(1e4, 1, prob = ifelse(species==1, .1, .2))
# simulate second twins
second_twins <- rbinom(1e4, 1, ifelse(species == 1, .1, .2))
# calculate the probability of second twins if the first set was twins
sum(first_twins==1 & second_twins==1)/sum(first_twins==1)
# simulate 10000 individuals from either species with prob = .5 A = 1, B = 0
species <- rbinom(1e4, 1, .5)
# simulate probability of first set being twins (1) given the species
first_twins <- rbinom(1e4, 1, prob = ifelse(species==1, .1, .2))
# simulate second twins
second_twins <- rbinom(1e4, 1, ifelse(species == 1, .1, .2))
# calculate the probability of second twins if the first set was twins
sum(first_twins==1 & second_twins==1)/sum(first_twins==1)
# simulate 10000 individuals from either species with prob = .5 A = 1, B = 0
species <- rbinom(1e4, 1, .5)
# simulate probability of first set being twins (1) given the species
first_twins <- rbinom(1e4, 1, prob = ifelse(species==1, .1, .2))
# simulate second twins
second_twins <- rbinom(1e4, 1, ifelse(species == 1, .1, .2))
# calculate the probability of second twins if the first set was twins
sum(first_twins==1 & second_twins==1)/sum(first_twins==1)
.5*.1 + .5*.2
twins_sim <- function(){
# simulate 10000 individuals from either species with prob = .5 A = 1, B = 0
species <- rbinom(1e5, 1, .5)
# simulate probability of first set being twins (1) given the species
first_twins <- rbinom(1e5, 1, prob = ifelse(species==1, .1, .2))
# simulate second twins
second_twins <- rbinom(1e5, 1, ifelse(species == 1, .1, .2))
# calculate the probability of second twins if the first set was twins
sum(first_twins==1 & second_twins==1)/sum(first_twins==1)
}
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
twins_sim()
(.5*.1)/(.5*.1 + .5*.2)
(.5*.2)/(.5*.2 + .1*.5)
.1/3 + .4/3
1/16
1/6
twins_sim <- function(){
# simulate 10000 individuals from either species with prob = .5 A = 1, B = 0
species <- rbinom(1e5, 1, .5)
# simulate probability of first set being twins (1) given the species
first_twins <- rbinom(1e5, 1, prob = ifelse(species==1, .1, .2))
# simulate second twins
second_twins <- rbinom(1e5, 1, ifelse(species == 1, .1, .2))
# calculate the probability of second twins if the first set was twins
sum(first_twins==1 & second_twins==1)/sum(first_twins==1)
}
twins_sim()
twins_sim <- function(){
# simulate 10000 individuals from either species with prob = .5 A = 1, B = 0
species <- rbinom(1e5, 1, .5)
# simulate probability of first set being twins (1) given the species
first_twins <- rbinom(1e5, 1, prob = ifelse(species==1, .1, .2))
# simulate second twins
second_twins <- rbinom(1e5, 1, ifelse(species == 1, .1, .2))
# calculate the probability of second twins if the first set was twins
sum(first_twins==1 & second_twins==1)/sum(first_twins==1)
}
hist(repicate(1000, twins_sim()))
twins_sim <- function(){
# simulate 10000 individuals from either species with prob = .5 A = 1, B = 0
species <- rbinom(1e5, 1, .5)
# simulate probability of first set being twins (1) given the species
first_twins <- rbinom(1e5, 1, prob = ifelse(species==1, .1, .2))
# simulate second twins
second_twins <- rbinom(1e5, 1, ifelse(species == 1, .1, .2))
# calculate the probability of second twins if the first set was twins
sum(first_twins==1 & second_twins==1)/sum(first_twins==1)
}
hist(replicate(1000, twins_sim()))
twins_sim <- function(){
# simulate 10000 individuals from either species with prob = .5 A = 1, B = 0
species <- rbinom(1e5, 1, .5)
# simulate probability of first set being twins (1) given the species
first_twins <- rbinom(1e5, 1, prob = ifelse(species==1, .1, .2))
# simulate second twins
second_twins <- rbinom(1e5, 1, ifelse(species == 1, .1, .2))
# calculate the probability of second twins if the first set was twins
sum(first_twins==1 & second_twins==1)/sum(first_twins==1)
}
hist(replicate(100, twins_sim()))
abline(v = 1/6, col = "white", lwd = 6)
abline(v = 1/6, col = "blue", lwd = 3)
hist(replicate(100, twins_sim()), main = "Simulations of second twins given first twins")
abline(v = 1/6, col = "white", lwd = 6)
twins_sim <- function(){
# simulate 10000 individuals from either species with prob = .5 A = 1, B = 0
species <- rbinom(1e5, 1, .5)
# simulate probability of first set being twins (1) given the species
first_twins <- rbinom(1e5, 1, prob = ifelse(species==1, .1, .2))
# simulate second twins
second_twins <- rbinom(1e5, 1, ifelse(species == 1, .1, .2))
# calculate the probability of second twins if the first set was twins
sum(first_twins==1 & second_twins==1)/sum(first_twins==1)
}
hist(replicate(100, twins_sim()), main = "Simulations of second twins given first twins")
abline(v = 1/6, col = "white", lwd = 6)
abline(v = 1/6, col = "blue", lwd = 3)
hist(replicate(100, twins_sim()), main = "Simulations of second twins given first twins",
xlab = "Proportion Second Twins given First Twins")
abline(v = 1/6, col = "white", lwd = 6)
twins_sim <- function(){
# simulate 10000 individuals from either species with prob = .5 A = 1, B = 0
species <- rbinom(1e5, 1, .5)
# simulate probability of first set being twins (1) given the species
first_twins <- rbinom(1e5, 1, prob = ifelse(species==1, .1, .2))
# simulate second twins
second_twins <- rbinom(1e5, 1, ifelse(species == 1, .1, .2))
# calculate the probability of second twins if the first set was twins
sum(first_twins==1 & second_twins==1)/sum(first_twins==1)
}
hist(replicate(100, twins_sim()), main = "Simulations of second twins given first twins",
xlab = "Proportion Second Twins given First Twins")
abline(v = 1/6, col = "white", lwd = 6)
abline(v = 1/6, col = "blue", lwd = 3)
# data
data_1 <- c(1,1,1)
data_2 <- c(1,1,1,0)
data_3 <- c(0,1,1,0,1,1,1)
# get the data into a list for stan
dat1 <- list(N = length(data_1), water = data_1)
dat2 <- list(N = length(data_2), water = data_2)
dat3 <- list(N = length(data_3), water = data_3)
# need to compile the stan model to C++
library(cmdstanr)
# check for syntax errors
mod_m1 <- cmdstan_model("stan_models/m1.stan", compile = F)
mod_m1$check_syntax()
# if syntax is good, compile the model
mod_m1 <- cmdstan_model("stan_models/m1.stan")
# fit the model to the data, n.b. I only have show_messages=F because I don't want them to be shown in the
# rendered document, I would normally want to see these.
fit1 <- mod_m1$sample(data = dat1, chains = 4, parallel_chains = 4, show_messages = F)
fit2 <- mod_m1$sample(data = dat2, chains = 4, parallel_chains = 4, show_messages = F)
fit3 <- mod_m1$sample(data = dat3, chains = 4, parallel_chains = 4, show_messages = F)
# plot histograms of the posterior samples of p
hist(fit1$draws("p", format = "df")$p, xlab = "p", main = "Plausibility Water", ylim = c(0,1))
hist(fit2$draws("p", format = "df")$p,  xlab = "p", main = "Plausibility Water")
hist(fit3$draws("p", format = "df")$p,  xlab = "p", main = "Plausibility Water")
# plot histograms of the posterior samples of p
hist(fit1$draws("p", format = "df")$p, xlab = "p", main = "Plausibility Water", ylim = c(0,1))
# plot histograms of the posterior samples of p
hist(fit1$draws("p", format = "df")$p, xlab = "p", main = "Plausibility Water", xlim = c(0,1))
library(cmdstanr)
mod <- cmdstan_model("stan_models/c3m1.stan", compile = F)
mod$check_syntax()
mod$check_syntax()
mod <- cmdstan_model("stan_models/c3m1.stan", compile = F)
mod$check_syntax()
mod$check_syntax()
mod <- cmdstan_model("stan_models/c3m1.stan", compile = F)
mod$check_syntax()
mod <- cmdstan_model("stan_models/c3m1.stan")
fit <- mod$sample(
data = dat,
chains = 4,
parallel_chains = 4
)
dat <- list(
N = 1,
y = 8,
n = 15
)
fit <- mod$sample(
data = dat,
chains = 4,
parallel_chains = 4
)
p <- fit$draws("p", format = "df")$p
p
class(p)
sample(p, 1e4, replace = T)
library(rethinking)
HDPI(p)
HPDI(p)
library(cmdstanr)
library(rethinking)
mod <- cmdstan_model("stan_models/c3m1.stan", compile = F)
mod$check_syntax()
mod <- cmdstan_model("stan_models/c3m1.stan")
dat <- list(
N = 1,
y = 8,
n = 15
)
fit <- mod$sample(
data = dat,
chains = 4,
parallel_chains = 4
)
p <- fit$draws("p", format = "df")$p
HPDI(p)
hist(p)
HPDI(p)
# plot the approximate posterior density
dens(p)
# plot the approximate posterior density
plot(density(p), lwd = 3)
# plot the approximate posterior density
plot(density(p), lwd = 3, main = "Posterior of the Probability of water",
xlab = "Proportion Water")
length(p)
# sample from the posterior
post_samp <- sample(p, 1e4, replace = T)
HPDI(post_samp)
# sample from the posterior
post_samp <- sample(p, 1e4, replace = T)
HPDI(post_samp)
HPDI(p)
rbinom(4000, 15, p)
sum(rbinom(4000, 15, p)==8)/4000
p_grid <- seq(0,1, l = 1000)
prior <- rep(1,1000)
likelihood <- dbinom(6, 9, p_grid)
posterior <- likelihood*prior
posterior <- posterior/sum(posterior)
set.seed(100)
samples <- sample(p_grid, prob = posterior, size = 1e4,
replace = T)
sum(samples<.2)/1e4
sum(samples>.8)/1e4
sum(samples > .2 & samples < .8)/1e4
quantile(samples, .2)
quantile(samples, .8)
library(rethinking)
HPDI(samples, .66)
quantile(samples, c(.17, .83))
library(cmdstanr)
library(rethinking)
# make the model but don't compile until checking the syntax
mod <- cmdstan_model("stan_models/c3m1.stan", compile = F)
# check the syntax
mod$check_syntax()
# syntax is good now compile the model
mod <- cmdstan_model("stan_models/c3m1.stan")
# put the data into a list
dat <- list(
N = 1,
y = 8,
n = 15
)
# fit the model
fit <- mod$sample(
data = dat,
chains = 4,
parallel_chains = 4,
show_messages = F
)
# extract the posterior samples for p (probability of water)
p <- fit$draws("p", format = "df")$p
# plot the approximate posterior density
plot(density(p), lwd = 3, main = "Posterior of the Probability of water",
xlab = "Proportion Water")
# sample from the posterior
post_samp <- sample(p, 1e4, replace = T)
# show them both just to see it's the same.
HPDI(post_samp, .9)
HPDI(p)
sum(rbinom(4000, 15, p)==8)/4000
sum(rbinom(4000, 9, p)==6)/4000
# make the model but don't compile until checking the syntax
mod <- cmdstan_model("stan_models/c3m5.stan", compile = F)
# check the syntax
mod$check_syntax()
# syntax is good now compile the model
mod <- cmdstan_model("stan_models/c3m5.stan")
fit <- mod$sample(
data = dat,
chains = 4,
parallel_chains = 4,
show_messages = F
)
# extract the posterior samples for p (probability of water)
p <- fit$draws("p", format = "df")$p
plot(density(p), lwd = 3)
# sample from the posterior
post_samp <- sample(p, 1e4, replace = T)
# show them both just to see it's the same.
HPDI(post_samp)
HPDI(p)
sum(rbinom(4000, 15, p)==8)/4000
sum(rbinom(4000, 9, p)==6)/4000
data(homeworkch3)
sum(birth1 + birth2)
mod <- cmdstan_model("stan_models/c3m1.stan")
# put the data into a list
dat <- list(
N = 1,
y = sum(c(birth1, birth2)),
n = length(c(birth1, birth2))
)
# fit the model
fit <- mod$sample(
data = dat,
chains = 4,
parallel_chains = 4,
show_messages = F
)
p <- fit$draws("p", format = "df")$p
plot(density(p))
HPDI(p, c(50,89,97))
p
reps <- rbinom(1e4, 200, prob = sample(p, 1e4, replace = T))
reps <- rbinom(1e4, 200, prob = sample(p, 1e4, replace = T))
hist(reps)
abline(v = sum(birth1 + birth2), col = "red", lwd = 3)
reps <- rbinom(1e4, 200, prob = sample(p, 1e4, replace = T))
hist(reps)
abline(v = sum(birth1 + birth2), col = "red", lwd = 3)
dens(reps)
dens(reps)
abline(v = sum(birth1 + birth2), col = "red", lwd = 3)
reps <- rbinom(1e4, 200, prob = sample(p, 1e4, replace = T))
hist(reps)
abline(v = sum(birth1 + birth2), col = "red", lwd = 3)
dens(reps)
abline(v = sum(birth1 + birth2), col = "red", lwd = 3)
reps <- rbinom(1e4, 200, prob = sample(p, 1e4, replace = T))
hist(reps)
abline(v = sum(birth1 + birth2), col = "red", lwd = 3)
reps <- rbinom(1e4, 100, prob = sample(p, 1e4, replace = T))
hist(reps)
abline(v = birth1, col = "red", lwd = 3)
birth1
sum(birth1)
reps <- rbinom(1e4, 100, prob = sample(p, 1e4, replace = T))
hist(reps)
abline(v = sum(birth1), col = "red", lwd = 3)
girl_boy <- sum(birth1==0 & birth2==1)
girl_boy
girl_boy <- sum(birth1==0 & birth2==1)
reps <- rbinom(1e4, girl_boy, prob = sample(p, 1e4, replace = T))
hist(reps)
abline(v = girl_boy, col = "red", lwd = 3)
girl_first <- sum(birth1==0)
girl_first
reps <- rbinom(1e4, girl_first, prob = sample(p, 1e4, replace = T))
hist(reps)
girl_boy <- sum(birth1==0 & birth2==1)
girl_first <- sum(birth1==0)
reps <- rbinom(1e4, girl_first, prob = sample(p, 1e4, replace = T))
girl_boy <- sum(birth1==0 & birth2==1)
hist(reps)
abline(v = girl_boy, col = "red", lwd = 3)
sum(birth1)
sum(birth2)
dens(reps)
plot(density(reps))
plot(density(p), ylim = c(0,1))
plot(density(p), xlim = c(0,1))
map(p)
?map
plot(density(p), xlim = c(0,1))
dbinom(sum(c(birth1 + birth2)), length(c(birth1, birth2)), prob = p_grid)
post <- dbinom(sum(c(birth1 + birth2)), length(c(birth1, birth2)), prob = p_grid) * rep(1, 1000)
post <- post/sum(post)
post
samps <- sample(p_grid, 1e4, replace = T, prob = post)
HPDI(p, c(50,89,97))
HPDI(samps, c(50,89,97))
samps
dens(post)
dens(samps)
dens(samps, xlim = c(0,1))
p_grid <- seq(0,1, l = 1000)
post <- dbinom(sum(c(birth1 + birth2)), length(c(birth1, birth2)), prob = p_grid) * rep(1, 1000)
post <- post/sum(post)
samps <- sample(p_grid, 1e4, replace = T, prob = post)
dens(samps, xlim = c(0,1))
HPDI(samps, c(50,89,97))
HPDI(samps,50)
HPDI(samps, .5)
HPDI(samps, 50)
HPDI(samps, 75)
HPDI(samps, 95)
length(c(birth1, birth2))
sum(c(birth1 + birth2))
post <- dbinom(sum(c(birth1 + birth2)), length(c(birth1, birth2)), prob = p_grid)
lik <- dbinom(sum(c(birth1 + birth2)), length(c(birth1, birth2)), prob = p_grid)
post <- lik*rep(1,length(p_grid))
post <- post/sum(post)
samps <- sample(p_grid, 1e4, replace = T, prob = post)
dens(samps, xlim = c(0,1))
HPDI(samps, prob = .5)
HPDI(samps, prob = c(.5, .89, .97))
HPDI(p, prob = c(.5, .89, .97))
mod <- cmdstan_model("stan_models/c3m1.stan")
# put the data into a list
dat <- list(
N = 1,
y = sum(c(birth1, birth2)),
n = length(c(birth1, birth2))
)
# fit the model
fit <- mod$sample(
data = dat,
chains = 4,
parallel_chains = 4,
show_messages = F
)
p <- fit$draws("p", format = "df")$p
plot(density(p), xlim = c(0,1))
map(p)
mod <- cmdstan_model("stan_models/c3m1.stan")
# put the data into a list
dat <- list(
N = 1,
y = sum(c(birth1, birth2)),
n = length(c(birth1, birth2))
)
# fit the model
fit <- mod$sample(
data = dat,
chains = 4,
parallel_chains = 4,
show_messages = F
)
p <- fit$draws("p", format = "df")$p
plot(density(p), xlim = c(0,1))
p_grid <- seq(0,1, l = 1000)
lik <- dbinom(sum(c(birth1 + birth2)), length(c(birth1, birth2)), prob = p_grid)
post <- lik*rep(1,length(p_grid))
post <- post/sum(post)
samps <- sample(p_grid, 1e4, replace = T, prob = post)
dens(samps, xlim = c(0,1))
HPDI(samps, prob = c(.5, .89, .97))
HPDI(p, prob = c(.5, .89, .97))
HPDI(p, c(50,89,97))
p_grid <- seq(0,1, l = 1000)
lik <- dbinom(sum(c(birth1 + birth2)), length(c(birth1, birth2)), prob = p_grid)
post <- lik*rep(1,length(p_grid))
post <- post/sum(post)
samps <- sample(p_grid, 1e4, replace = T, prob = post)
dens(samps, xlim = c(0,1))
HPDI(samps, prob = c(.5, .89, .97))
HPDI(p, c(50,89,97))
HPDI(p, c(.50,.89,.97))
HPDI(samps, prob = c(.5, .89, .97))
HPDI(p, c(.50,.89,.97))
p_grid <- seq(0,1, l = 1000)
lik <- dbinom(sum(c(birth1 + birth2)), length(c(birth1, birth2)), prob = p_grid)
post <- lik*rep(1,length(p_grid))
post <- post/sum(post)
samps <- sample(p_grid, 1e4, replace = T, prob = post)
dens(samps, xlim = c(0,1))
HPDI(samps, prob = c(.5, .89, .97))
HPDI(p, c(.50,.89,.97))
girl_first <- sum(birth1==0)
reps <- rbinom(1e4, girl_first, prob = sample(p, 1e4, replace = T))
girl_boy <- sum(birth1==0 & birth2==1)
hist(reps)
abline(v = girl_boy, col = "red", lwd = 3)
